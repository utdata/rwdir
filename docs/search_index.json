[["bind-join.html", "Chapter 10 Bind and join 10.1 Goals of the chapter 10.2 The story: An update to Denied 10.3 About the data 10.4 Merging data together 10.5 About joins 10.6 Some cleanup: filter and select 10.7 Create an audit benchmark column 10.8 Export the data", " Chapter 10 Bind and join So far all of our lessons have come from a single data source, but that’s not always the case in the real world. With this lesson we’ll learn how to “bind” and “join” data, which are different ways to bring multiple data frames together into a single object. This is the first of a two-chapter project. It is by Prof. McDonald, using a Mac. 10.1 Goals of the chapter Merge multiple data files with bind_rows() Join data frames with inner_join() Use str_remove() to clean data Introduce if_else() for categorization We’ll use the results of this chapter in our next one. 10.2 The story: An update to Denied In 2016, the Houston Chronicle published a multi-part series called Denied that outlined how a Texas Education Agency policy started in 2004 could force an audit of schools that have more than 8.5% of their students in special education programs. The story was a Pulitzer Prize finalist. Here’s an excerpt: Over a decade ago, the officials arbitrarily decided what percentage of students should get special education services — 8.5% — and since then they have forced school districts to comply by strictly auditing those serving too many kids. Their efforts, which started in 2004 but have never been publicly announced or explained, have saved the Texas Education Agency billions of dollars but denied vital supports to children with autism, attention deficit hyperactivity disorder, dyslexia, epilepsy, mental illnesses, speech impediments, traumatic brain injuries, even blindness and deafness, a Houston Chronicle investigation has found. More than a dozen teachers and administrators from across the state told the Chronicle they have delayed or denied special education to disabled students in order to stay below the 8.5 percent benchmark. They revealed a variety of methods, from putting kids into a cheaper alternative program known as “Section 504” to persuading parents to pull their children out of public school altogether. Following the Chronicle’s reporting (along with other news orgs), the Texas Legislature in 2017 unanimously banned using a target or benchmark on how many students a district or charter school enrolls in special education. We want to look into the result of this reporting based on three things: Has the percentage of special education students in Texas changed since the benchmarking policy was dropped? How many districts were above that arbitrary 8.5% benchmark before and after the changes? How have local districts changed? To prepare for this: Read Part 1 of the original Denied series. Read About this series Read this followup about the legislative changes. 10.3 About the data Each year, the Texas Education Agency publishes the percentage of students in special education as part of their Texas Academic Performance Reports. We can download a file that has the percentages for each district in the state. There are some challenges, though: We have to download each year individually. There are nine years of data. The are no district names in the files, only a district ID. We can get a reference file, though. There are some differences is formatting for some files. I will save you the hassle of going through the TAPR database to find and download the individual files, and I will also supply code to clean the files to make them consistent. I’ll try not to get lost in the weeds along the way. 10.3.1 Set up your project Go to this page. Yes, it looks like you can’t see anything, but … Look for the Download button and download the zip file. Find that on your computer and uncompress it. Rename the folder to yourname-sped but use your name. Move the folder to your rwd folder or wherever you’ve been saving your class projects. In RStudio, choose File &gt; New Project. Choose EXISTING Directory at the next step and then find the folder you just moved. Use that to create your project. You should now have your own project that already has a head start on this project. It has the data in a data-raw folder, and your first notebook 01-import that already has some code in it. 10.3.2 Open, read and run Once you have your project set up … Open up the 01-import notebook. Read every line Run each chunk as you do. Go ahead. I’ll wait. via GIPHY There is a lot to take in there about where the data came from and how we dealt with it. Here is where you end up: You have nine data files for each year and one reference file imported. 10.4 Merging data together OK, so we have nine different yearly files. Wouldn’t it be a lot easier if these were ONE thing? Indeed, we can merge these files together by stacking them on top of each other. Let’s review the concept using Starburst data: Here’s an image representation of the concept. You have two data sets and you stack them on top of each other where the column names match. (Note here that identical rows in both data sets remain). Since all nine of our data files have the same column names, we can easily merge them with function bind_rows(). Let’s demonstrate through building it. Start a new section on your R Markdown document and note you are merging data Add a chunk with just the dstud13 data and run it. dstud13 ## # A tibble: 1,228 × 5 ## district year dpetallc dpetspec dpetspep ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 001902 2013 595 73 12.3 ## 2 001903 2013 1236 113 9.1 ## 3 001904 2013 751 81 10.8 ## 4 001906 2013 406 45 11.1 ## 5 001907 2013 3288 252 7.7 ## 6 001908 2013 1619 151 9.3 ## 7 001909 2013 439 48 10.9 ## 8 002901 2013 3617 250 6.9 ## 9 003801 2013 635 45 7.1 ## 10 003902 2013 2726 196 7.2 ## # … with 1,218 more rows The result shows there are 1228 rows and 5 variables in the data, which should match what shows for dstud13 in your Environment tab. Now edit that chunk to use bind_rows() with dstud14. dstud13 |&gt; bind_rows(dstud14) ## # A tibble: 2,455 × 5 ## district year dpetallc dpetspec dpetspep ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 001902 2013 595 73 12.3 ## 2 001903 2013 1236 113 9.1 ## 3 001904 2013 751 81 10.8 ## 4 001906 2013 406 45 11.1 ## 5 001907 2013 3288 252 7.7 ## 6 001908 2013 1619 151 9.3 ## 7 001909 2013 439 48 10.9 ## 8 002901 2013 3617 250 6.9 ## 9 003801 2013 635 45 7.1 ## 10 003902 2013 2726 196 7.2 ## # … with 2,445 more rows This shows we now have 2455 rows and 5 variables. This is good … we’ve addded the rows of dstud14 but we don’t have any new columns because the column names were identical. Now edit the chunk to do all these things: Save the result of the merge into a new data frame called sped_merged. Within the bind_rows() function, also add the dstud15 dataframe so you can see you are adding more on. At the bottom of the chunk print out the sped_merged tibble and pipe it into count(year) so you can make sure you continue to add rows correctly. It should look like this: sped_merged &lt;- dstud13 |&gt; bind_rows( dstud14, dstud15 ) # we use this to ensure we bind correctly when we add new years sped_merged |&gt; count(year) ## # A tibble: 3 × 2 ## year n ## &lt;chr&gt; &lt;int&gt; ## 1 2013 1228 ## 2 2014 1227 ## 3 2015 1219 (You might also see each new datatable added in their own bind_rows() function instead of all in one. Either works.) We are NOT saving the count() result here, we are just printing it to our screen to make sure we get all the years. Now that we know this is working, you’ll finish this out on your own. Edit your chunk to add bind_rows() for the rest of the files dstud16 through dstud22. You just keep tacking them on like we did with dstud15. After you are done, make sure you look at the sped_merged listing in your environment to make sure you end up with a count for each year of data. OK, we have all our data in one file, but we still don’t know the district names. It’s time to Join our data with our reference file. 10.5 About joins OK, before we go further we need to talk about joining data. It’s one of those Basic Data Journalism Functions … What joins do is match rows from two data sets that have a column of common values, like an ID or county name. (The district ID column in our case). Columns from the second data set will be added based on where the ID’s match. There are several types of joins. We describe these as left vs right based on which table we reference first (which is the left one). How much data you end up with depends on the “direction” of the join. An inner_join puts together columns from both tables where there are matching rows. If there are records in either table where the IDs don’t match, they are dropped. A left_join will keep ALL the rows of your first table, then bring over columns from the second table where the IDs match. If there isn’t a match in the second table, then new values will be blank in the new columns. A right_join is the opposite of that: You keep ALL the rows of the second table, but bring over only matching rows from the first. A full_join keeps all rows and columns from both tables, joining rows when they match. Here are two common ways to think of this visually. In the image below, The orange represents the data that remains after the join. This next visual shows this as tables where only two rows “match” so you can see how non-matches are handled (the lighter color represents blank values). The functions listed there are the tidyverse versions of each join type. 10.5.1 Joining our reference table In our case we start with the dref data and then use an inner_join to add all the yearly data values. We’re doing it in this order so the dref values are listed first in our resulting table. Start a new Markdown section and note we are joining the reference data Add the chunk below and run it sped_joined &lt;- dref |&gt; inner_join(sped_merged, by = &quot;district&quot;) sped_joined |&gt; head() ## # A tibble: 6 × 9 ## district distname cntyname dflalted dflchart year dpetallc dpetspec dpets…¹ ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 001902 CAYUGA ISD ANDERSON N N 2013 595 73 12.3 ## 2 001902 CAYUGA ISD ANDERSON N N 2014 553 76 13.7 ## 3 001902 CAYUGA ISD ANDERSON N N 2015 577 76 13.2 ## 4 001902 CAYUGA ISD ANDERSON N N 2016 568 78 13.7 ## 5 001902 CAYUGA ISD ANDERSON N N 2017 576 82 14.2 ## 6 001902 CAYUGA ISD ANDERSON N N 2018 575 83 14.4 ## # … with abbreviated variable name ¹​dpetspep You might also glimpse() it so you can see all the columns have been added. sped_joined |&gt; glimpse() ## Rows: 11,882 ## Columns: 9 ## $ district &lt;chr&gt; &quot;001902&quot;, &quot;001902&quot;, &quot;001902&quot;, &quot;001902&quot;, &quot;001902&quot;, &quot;001902&quot;, &quot;… ## $ distname &lt;chr&gt; &quot;CAYUGA ISD&quot;, &quot;CAYUGA ISD&quot;, &quot;CAYUGA ISD&quot;, &quot;CAYUGA ISD&quot;, &quot;CAYU… ## $ cntyname &lt;chr&gt; &quot;ANDERSON&quot;, &quot;ANDERSON&quot;, &quot;ANDERSON&quot;, &quot;ANDERSON&quot;, &quot;ANDERSON&quot;, &quot;… ## $ dflalted &lt;chr&gt; &quot;N&quot;, &quot;N&quot;, &quot;N&quot;, &quot;N&quot;, &quot;N&quot;, &quot;N&quot;, &quot;N&quot;, &quot;N&quot;, &quot;N&quot;, &quot;N&quot;, &quot;N&quot;, &quot;N&quot;, &quot;… ## $ dflchart &lt;chr&gt; &quot;N&quot;, &quot;N&quot;, &quot;N&quot;, &quot;N&quot;, &quot;N&quot;, &quot;N&quot;, &quot;N&quot;, &quot;N&quot;, &quot;N&quot;, &quot;N&quot;, &quot;N&quot;, &quot;N&quot;, &quot;… ## $ year &lt;chr&gt; &quot;2013&quot;, &quot;2014&quot;, &quot;2015&quot;, &quot;2016&quot;, &quot;2017&quot;, &quot;2018&quot;, &quot;2019&quot;, &quot;2020… ## $ dpetallc &lt;dbl&gt; 595, 553, 577, 568, 576, 575, 564, 557, 535, 574, 1236, 1207,… ## $ dpetspec &lt;dbl&gt; 73, 76, 76, 78, 82, 83, 84, 82, 78, 84, 113, 107, 126, 144, 1… ## $ dpetspep &lt;dbl&gt; 12.3, 13.7, 13.2, 13.7, 14.2, 14.4, 14.9, 14.7, 14.6, 14.6, 9… Let’s explain what is going on here: We are creating a new bucket sped_joined to save our data. We start with dref so those fields will be listed first in our result. We then pipe into inner_join() to sped_merged, which will attach our dref data to our merged data when the ID matches in the district variable. The by = \"district\" argument ensures that we are matching based on the district column in both data sets. We could’ve left out the by = argument and R would match columns of the same name, but it is best practice to specify your joining columns so it is clear what is happening. You wouldn’t want to be surprised by other columns of the same name that you didn’t want to join on. If you wanted to specify join columns of different names it would look like this: df1 |&gt; inner_join(df2, by = c(\"df1_id\" = \"df2_id\")) There are now 11882 rows in our joined data, fewer than what was in the original merged file because some districts (mostly charters) have closed and were not in our reference file. We are comparing only districts that have been open during this time period. For that matter, we don’t want charter or alternative education districts at all, so we’ll drop those next. 10.6 Some cleanup: filter and select Filtering and selecting data is something we’ve done time and again, so you should be able to do this on your own. You will next remove the charter and alternative education districts. This is a judgement call on our part to focus on just traditional public schools. We can always come back later and change if needed. You’ll also remove and rename columns to make the more descriptive. Start a new markdown section and note you are cleaning up your data. Create an R chunk and start with the sped_joined and then do all these things … Use filter() to keep rows where: the dflalted field is “N” AND the dflchart field is “N” Use select() to: remove (or not include) the dflalted and dflchart columns. (You can only do this AFTER you filter with them!) Use select() or rename() to rename the following columns: change dpetallc to all_count change dpetspec to sped_count change dpetspep to sped_percent Make sure all your changes are saved into a new data frame called sped_cleaned. I really, really suggest you don’t try to write that all at once. Build it one line at a time so you can see the result as you build your code. I’m being too nice here sped_cleaned &lt;- sped_joined |&gt; filter(dflalted == &quot;N&quot; &amp; dflchart == &quot;N&quot;) |&gt; select( district, distname, cntyname, year, all_count = dpetallc, sped_count = dpetspec, sped_percent = dpetspep ) You should end up with 10204 rows and 7 variables. 10.7 Create an audit benchmark column Part of this story is to note when a district is above the “8.5%” benchmark that the TEA was using for their audit calculations. It would be useful to have a column that noted if a district was above or below that threshold so we could plot districts based on that flag. We’ll create this new column and introduce the logic of if_else(). OK, our data looks like this: sped_cleaned |&gt; head() ## # A tibble: 6 × 7 ## district distname cntyname year all_count sped_count sped_percent ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 001902 CAYUGA ISD ANDERSON 2013 595 73 12.3 ## 2 001902 CAYUGA ISD ANDERSON 2014 553 76 13.7 ## 3 001902 CAYUGA ISD ANDERSON 2015 577 76 13.2 ## 4 001902 CAYUGA ISD ANDERSON 2016 568 78 13.7 ## 5 001902 CAYUGA ISD ANDERSON 2017 576 82 14.2 ## 6 001902 CAYUGA ISD ANDERSON 2018 575 83 14.4 We want to add a column called audit_flag that says ABOVE if the sped_percent is above “8.5”, and says BELOW if it isn’t. This is a simple true/false condition that is perfect for the if_else() function. Add a new Markdown section and note that you are adding an audit flag column Create an r chunk that and run it and I’ll explain after. sped_flag &lt;- sped_cleaned |&gt; mutate(audit_flag = if_else(sped_percent &gt; 8.5, &quot;ABOVE&quot;, &quot;BELOW&quot;)) # this pulls 30 random rows so I can check results sped_flag |&gt; sample_n(10) ## # A tibble: 10 × 8 ## district distname cntyname year all_count sped_c…¹ sped_…² audit…³ ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; ## 1 182905 STRAWN ISD PALO PINTO 2019 167 17 10.2 ABOVE ## 2 040901 MORTON ISD COCHRAN 2013 422 37 8.8 ABOVE ## 3 018904 VALLEY MILLS ISD BOSQUE 2017 619 74 12 ABOVE ## 4 018907 KOPPERL ISD BOSQUE 2016 223 25 11.2 ABOVE ## 5 235902 VICTORIA ISD VICTORIA 2020 13797 1689 12.2 ABOVE ## 6 227907 MANOR ISD TRAVIS 2019 9445 844 8.9 ABOVE ## 7 034906 MCLEOD ISD CASS 2018 378 40 10.6 ABOVE ## 8 239901 BRENHAM ISD WASHINGTON 2017 4950 594 12 ABOVE ## 9 057914 MESQUITE ISD DALLAS 2017 40945 3970 9.7 ABOVE ## 10 247903 LA VERNIA ISD WILSON 2017 3278 302 9.2 ABOVE ## # … with abbreviated variable names ¹​sped_count, ²​sped_percent, ³​audit_flag Let’s walk through the code above: We’re making a new data frame called sped_flag and then starting with sped_cleaned. We use mutate() to create a new column and we name it audit_flag. We set the value of audit_flag to be the result of this if_else() function. That function takes three arguments: A condition test (sped_percent &gt; 8.5 in our case), what is the result if the condition is true (“ABOVE” in our case), and what is the result if the condition is NOT true (“BELOW”) in our case. Lastly we print out the new data sped_cleaned and pipe it into sample_n() which gives us a number of random rows from the data. I do this because the top of the data was all TRUE so I couldn’t see if the mutate worked properly or not. (Always check your calculations!!) 10.8 Export the data This is something you’ve done a number of times as well, so I leave you to you: Make a new section and note you are exporting the data Export your sped_flag data using write_rds() and save it in your data-processed folder. In the next chapter we’ll build an analysis notebook to find our answers! "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
